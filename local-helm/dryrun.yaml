Release "bc" has been upgraded. Happy Helming!
NAME: bc
LAST DEPLOYED: Fri Feb 28 16:08:30 2020
NAMESPACE: buyingcatalogue
STATUS: pending-upgrade
REVISION: 15
USER-SUPPLIED VALUES:
{}

COMPUTED VALUES:
azurite:
  affinity: {}
  fullnameOverride: gpitfutures-bc-azurite
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: mcr.microsoft.com/azure-storage/azurite
  imagePullSecrets: []
  nameOverride: azurite
  nodeSelector: {}
  podSecurityContext: {}
  replicaCount: 1
  resources:
    limits:
      cpu: 1000m
      memory: 1000Mi
    requests:
      cpu: 100m
      memory: 50Mi
  securityContext: {}
  service:
    blobPort: 10000
    queuePort: 10001
    tablePort: 10002
    type: LoadBalancer
  serviceAccount:
    annotations: {}
    create: true
    name: null
  tolerations: []
bapi:
  affinity: {}
  connectionString: Server=gpitfutures-bc-bapi-sql.buyingcatalogue,1450;Initial Catalog=buyingcatalogue;Persist
    Security Info=False;User Id=NHSD;Password=DisruptTheMarket1!
  env:
    configmap: null
    secrets: null
    values: null
  fullnameOverride: gpitfutures-bc-bapi
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: gpitfuturesdevacr.azurecr.io/nhsd/buying-catalogue/api
  imagePullSecrets:
  - name: regcredlocal
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths: []
    tls: []
  minReadySeconds: 5
  nameOverride: bapi
  nodeSelector: {}
  podSecurityContext: {}
  replicaCount: 1
  resources:
    limits:
      cpu: 1000m
      memory: 500Mi
    requests:
      cpu: 250m
      memory: 50Mi
  securityContext: {}
  service:
    port: 5100
    type: LoadBalancer
  serviceAccount:
    annotations: {}
    create: false
    name: null
  serviceDependencies:
    dapiUrl: http://gpitfutures-bc-dapi.buyingcatalogue:5101
  tolerations: []
  updateStrategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
bapi-db:
  affinity: {}
  env:
    configmap: null
    secrets:
    - name: SA_PASSWORD
      valueFrom:
        secretKeyRef:
          key: SA_PASSWORD
          name: mssql
    values:
    - name: ACCEPT_EULA
      value: "Y"
    - name: MSSQL_PID
      value: Developer
    - name: DB_NAME
      value: buyingcatalogue
    - name: DB_USER
      value: NHSD
    - name: DB_PASSWORD
      value: DisruptTheMarket1!
  fullnameOverride: gpitfutures-bc-bapi-sql
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: gpitfuturesdevacr.azurecr.io/nhsd/buying-catalogue/debug-db
  imagePullSecrets:
  - name: regcredlocal
  livenessprobe:
    initialDelaySeconds: 15
    periodSeconds: 20
  nameOverride: bapi-sql
  nodeSelector: {}
  podSecurityContext: {}
  readinessprobe:
    initialDelaySeconds: 5
    periodSeconds: 10
  replicaCount: 1
  resources:
    limits:
      cpu: 4000m
      memory: 2048Mi
    requests:
      cpu: 250m
      memory: 512Mi
  securityContext: {}
  service:
    port: 1450
    type: ClusterIP
  serviceAccount:
    annotations: {}
    create: true
    name: null
  tolerations: []
dapi:
  affinity: {}
  azureBlobStorage:
    connectionString: AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;DefaultEndpointsProtocol=http;BlobEndpoint=http://gpitfutures-bc-azurite.buyingcatalogue:10000/devstoreaccount1;QueueEndpoint=http://gpitfutures-bc-azurite.buyingcatalogue:10001/devstoreaccount1;TableEndpoint=http://gpitfutures-bc-azurite.buyingcatalogue:10002/devstoreaccount1;
    containerName: container-1
  env:
    configmap: null
    secrets: null
    values: null
  fullnameOverride: gpitfutures-bc-dapi
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: gpitfuturesdevacr.azurecr.io/nhsd/buying-catalogue/document-dapi
  imagePullSecrets:
  - name: regcredlocal
  ingress:
    annotations: {}
    enabled: false
    hosts:
    - host: chart-example.local
      paths: []
    tls: []
  nameOverride: dapi
  nodeSelector: {}
  podSecurityContext: {}
  replicaCount: 1
  resources: {}
  securityContext: {}
  service:
    port: 5101
    type: LoadBalancer
  serviceAccount:
    annotations: {}
    create: true
    name: null
  tolerations: []
  updateStrategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
file-loader:
  affinity: {}
  azureBlobStorage:
    connectionString: AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;DefaultEndpointsProtocol=http;BlobEndpoint=http://gpitfutures-bc-azurite.buyingcatalogue:10000/devstoreaccount1;QueueEndpoint=http://gpitfutures-bc-azurite.buyingcatalogue:10001/devstoreaccount1;TableEndpoint=http://gpitfutures-bc-azurite.buyingcatalogue:10002/devstoreaccount1;
  env:
    configmap: null
    secrets: null
    values: null
  fullnameOverride: gpitfutures-bc-file-loader
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: gpitfuturesdevacr.azurecr.io/nhsd/buying-catalogue/file-uploader
  imagePullSecrets:
  - name: regcredlocal
  nameOverride: file-loader
  nodeSelector: {}
  podSecurityContext: {}
  replicaCount: 1
  resources:
    limits:
      cpu: 1000m
      memory: 500Mi
    requests:
      cpu: 250m
      memory: 50Mi
  securityContext: {}
  serviceAccount:
    annotations: {}
    create: true
    name: null
  tolerations: []
mp:
  affinity: {}
  env:
    configmap: null
    secrets: null
    values: null
  fullnameOverride: gpitfutures-bc-mp
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: gpitfuturesdevacr.azurecr.io/nhsd/buying-catalogue/marketingpage
  imagePullSecrets:
  - name: regcredlocal
  ingress:
    annotations:
      ingress.kubernetes.io/ssl-redirect: "false"
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    enabled: true
    hosts:
    - host: localhost
      paths:
      - /supplier
    tls: []
  nameOverride: marketing-pages
  nodeSelector: {}
  podSecurityContext: {}
  replicaCount: 1
  resources:
    limits:
      cpu: 1000m
      memory: 300Mi
    requests:
      cpu: 250m
      memory: 100Mi
  securityContext: {}
  service:
    port: 3002
    type: LoadBalancer
  serviceAccount:
    annotations: {}
    create: true
    name: null
  serviceDependencies:
    bapiUrl: http://gpitfutures-bc-bapi.buyingcatalogue:5100
    dapiUrl: http://gpitfutures-bc-dapi.buyingcatalogue:5101
  tolerations: []
pb:
  affinity: {}
  env:
    configmap: null
    secrets: null
    values: null
  fullnameOverride: gpitfutures-bc-pb
  global: {}
  image:
    pullPolicy: IfNotPresent
    repository: gpitfuturesdevacr.azurecr.io/nhsd/buying-catalogue/publicbrowse
  imagePullSecrets:
  - name: regcredlocal
  ingress:
    annotations:
      ingress.kubernetes.io/ssl-redirect: "false"
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    enabled: true
    hosts:
    - host: localhost
      paths:
      - /
    tls: []
  nameOverride: public-browse
  nodeSelector: {}
  podSecurityContext: {}
  replicaCount: 1
  resources:
    limits:
      cpu: 1000m
      memory: 300Mi
    requests:
      cpu: 250m
      memory: 100Mi
  securityContext: {}
  service:
    port: 3000
    type: LoadBalancer
  serviceAccount:
    annotations: {}
    create: true
    name: null
  serviceDependencies:
    bapiUrl: http://gpitfutures-bc-bapi.buyingcatalogue:5100
    dapiUrl: http://gpitfutures-bc-dapi.buyingcatalogue:5101
  tolerations: []

HOOKS:
---
# Source: local-env/charts/azurite/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "gpitfutures-bc-azurite-test-connection"
  labels:
    helm.sh/chart: azurite-0.1.0
    app.kubernetes.io/name: azurite
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['gpitfutures-bc-azurite:']
  restartPolicy: Never
---
# Source: local-env/charts/bapi-db/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "gpitfutures-bc-bapi-sql-test-connection"
  labels:
    helm.sh/chart: bapi-db-0.1.0
    app.kubernetes.io/name: bapi-sql
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['gpitfutures-bc-bapi-sql:1450']
  restartPolicy: Never
---
# Source: local-env/charts/bapi/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "gpitfutures-bc-bapi-test-connection"
  labels:
    helm.sh/chart: bapi-0.1.0
    app.kubernetes.io/name: bapi
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['gpitfutures-bc-bapi:5100']
  restartPolicy: Never
---
# Source: local-env/charts/dapi/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "gpitfutures-bc-dapi-test-connection"
  labels:
    helm.sh/chart: dapi-0.1.0
    app.kubernetes.io/name: dapi
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['gpitfutures-bc-dapi:5101']
  restartPolicy: Never
---
# Source: local-env/charts/mp/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "gpitfutures-bc-mp-test-connection"
  labels:
    helm.sh/chart: mp-0.1.0
    app.kubernetes.io/name: marketing-pages
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['gpitfutures-bc-mp:3002']
  restartPolicy: Never
---
# Source: local-env/charts/pb/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "gpitfutures-bc-pb-test-connection"
  labels:
    helm.sh/chart: pb-0.1.0
    app.kubernetes.io/name: public-browse
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test-success
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['gpitfutures-bc-pb:3000']
  restartPolicy: Never
MANIFEST:
---
# Source: local-env/charts/azurite/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gpitfutures-bc-azurite
  labels:
    helm.sh/chart: azurite-0.1.0
    app.kubernetes.io/name: azurite
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
---
# Source: local-env/charts/bapi-db/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gpitfutures-bc-bapi-sql
  labels:
    helm.sh/chart: bapi-db-0.1.0
    app.kubernetes.io/name: bapi-sql
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
---
# Source: local-env/charts/dapi/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gpitfutures-bc-dapi
  labels:
    helm.sh/chart: dapi-0.1.0
    app.kubernetes.io/name: dapi
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
---
# Source: local-env/charts/file-loader/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gpitfutures-bc-file-loader
  labels:
    helm.sh/chart: file-loader-0.1.0
    app.kubernetes.io/name: file-loader
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
---
# Source: local-env/charts/mp/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gpitfutures-bc-mp
  labels:
    helm.sh/chart: mp-0.1.0
    app.kubernetes.io/name: marketing-pages
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
---
# Source: local-env/charts/pb/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gpitfutures-bc-pb
  labels:
    helm.sh/chart: pb-0.1.0
    app.kubernetes.io/name: public-browse
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
---
# Source: local-env/charts/azurite/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gpitfutures-bc-azurite
  labels:
    helm.sh/chart: azurite-0.1.0
    app.kubernetes.io/name: azurite
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: LoadBalancer
  ports:
    - port: 10000
      targetPort: 10000
      protocol: TCP
      name: blob-port
    - port: 10001
      targetPort: 10001
      protocol: TCP
      name: queue-port
    - port: 10002
      targetPort: 10002
      protocol: TCP
      name: table-port
  selector:
    app.kubernetes.io/name: azurite
    app.kubernetes.io/instance: bc
---
# Source: local-env/charts/bapi-db/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gpitfutures-bc-bapi-sql
  labels:
    helm.sh/chart: bapi-db-0.1.0
    app.kubernetes.io/name: bapi-sql
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
    - port: 1450
      targetPort: 1433
      protocol: TCP      
  selector:
    app.kubernetes.io/name: bapi-sql
    app.kubernetes.io/instance: bc
---
# Source: local-env/charts/bapi/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gpitfutures-bc-bapi
  labels:
    helm.sh/chart: bapi-0.1.0
    app.kubernetes.io/name: bapi
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: LoadBalancer
  ports:
    - port: 5100
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: bapi
    app.kubernetes.io/instance: bc
---
# Source: local-env/charts/dapi/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gpitfutures-bc-dapi
  labels:
    helm.sh/chart: dapi-0.1.0
    app.kubernetes.io/name: dapi
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: LoadBalancer
  ports:
    - port: 5101
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: dapi
    app.kubernetes.io/instance: bc
---
# Source: local-env/charts/mp/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gpitfutures-bc-mp
  labels:
    helm.sh/chart: mp-0.1.0
    app.kubernetes.io/name: marketing-pages
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: LoadBalancer
  ports:
    - port: 3002
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: marketing-pages
    app.kubernetes.io/instance: bc
---
# Source: local-env/charts/pb/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gpitfutures-bc-pb
  labels:
    helm.sh/chart: pb-0.1.0
    app.kubernetes.io/name: public-browse
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  type: LoadBalancer
  ports:
    - port: 3000
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: public-browse
    app.kubernetes.io/instance: bc
---
# Source: local-env/charts/azurite/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gpitfutures-bc-azurite
  labels:
    helm.sh/chart: azurite-0.1.0
    app.kubernetes.io/name: azurite
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: azurite
      app.kubernetes.io/instance: bc
  template:
    metadata:
      labels:
        app.kubernetes.io/name: azurite
        app.kubernetes.io/instance: bc
    spec:
      serviceAccountName: gpitfutures-bc-azurite
      securityContext:
        {}
      containers:
        - name: azurite
          securityContext:
            {}
          image: "mcr.microsoft.com/azure-storage/azurite:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: blob-port
              containerPort: 10000
              protocol: TCP
            - name: queue-port
              containerPort: 10001
              protocol: TCP
            - name: table-port
              containerPort: 10002
              protocol: TCP
          resources:
            limits:
              cpu: 1000m
              memory: 1000Mi
            requests:
              cpu: 100m
              memory: 50Mi
---
# Source: local-env/charts/bapi-db/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gpitfutures-bc-bapi-sql
  labels:
    helm.sh/chart: bapi-db-0.1.0
    app.kubernetes.io/name: bapi-sql
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: bapi-sql
      app.kubernetes.io/instance: bc
  template:
    metadata:
      labels:
        app.kubernetes.io/name: bapi-sql
        app.kubernetes.io/instance: bc
    spec:
      imagePullSecrets:
        - name: regcredlocal
      serviceAccountName: gpitfutures-bc-bapi-sql
      securityContext:
        {}
      containers:
        - name: bapi-db
          securityContext:
            {}
          image: "gpitfuturesdevacr.azurecr.io/nhsd/buying-catalogue/debug-db:latest"          
          imagePullPolicy: IfNotPresent
          ports:
            - name: mssql
              containerPort: 1450
          # livenessProbe:
          #    tcpSocket:
          #      port: mssql
          #    initialDelaySeconds: 15
          #    periodSeconds: 20
          # readinessProbe:
          #    tcpSocket:
          #      port: mssql
          #    initialDelaySeconds: 5
          #    periodSeconds: 10
          resources:
            limits:
              cpu: 4000m
              memory: 2048Mi
            requests:
              cpu: 250m
              memory: 512Mi
          env:
              - name: ACCEPT_EULA
                value: "Y"
              - name: MSSQL_PID
                value: "Developer"
              - name: DB_NAME
                value: "buyingcatalogue"
              - name: DB_USER
                value: "NHSD"
              - name: DB_PASSWORD
                value: "DisruptTheMarket1!"
              - name: SA_PASSWORD
                valueFrom:
                  secretKeyRef:            
                    name: mssql
                    key: SA_PASSWORD
---
# Source: local-env/charts/bapi/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gpitfutures-bc-bapi
  labels:
    helm.sh/chart: bapi-0.1.0
    app.kubernetes.io/name: bapi
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy: 
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  minReadySeconds: 5
  selector:
    matchLabels:
      app.kubernetes.io/name: bapi
      app.kubernetes.io/instance: bc
  template:
    metadata:
      labels:
        app.kubernetes.io/name: bapi
        app.kubernetes.io/instance: bc
    spec:
      imagePullSecrets:
        - name: regcredlocal
      serviceAccountName: default
      securityContext:
        {}
      containers:
        - name: bapi
          securityContext:
            {}
          image: "gpitfuturesdevacr.azurecr.io/nhsd/buying-catalogue/api:latest"          
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health/live
              port: http
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
          resources:
            limits:
              cpu: 1000m
              memory: 500Mi
            requests:
              cpu: 250m
              memory: 50Mi
          env:
            - name: ASPNETCORE_ENVIRONMENT
              value: Development
            - name: ASPNETCORE_URLS
              value: http://0.0.0.0:80
            - name: APICLIENTSETTINGS__DOCUMENTAPI__BASEURL
              value: "http://gpitfutures-bc-dapi.buyingcatalogue:5101"
            - name: CONNECTIONSTRINGS__BUYINGCATALOGUE
              value: "Server=gpitfutures-bc-bapi-sql.buyingcatalogue,1450;Initial Catalog=buyingcatalogue;Persist Security Info=False;User Id=NHSD;Password=DisruptTheMarket1!"
---
# Source: local-env/charts/dapi/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gpitfutures-bc-dapi
  labels:
    helm.sh/chart: dapi-0.1.0
    app.kubernetes.io/name: dapi
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy: 
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1  
  selector:
    matchLabels:
      app.kubernetes.io/name: dapi
      app.kubernetes.io/instance: bc
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dapi
        app.kubernetes.io/instance: bc
    spec:
      imagePullSecrets:
        - name: regcredlocal
      serviceAccountName: gpitfutures-bc-dapi
      securityContext:
        {}
      containers:
        - name: dapi
          securityContext:
            {}
          image: "gpitfuturesdevacr.azurecr.io/nhsd/buying-catalogue/document-dapi:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /health/live
              port: http
          readinessProbe:
            httpGet:
              path: /health/ready
              port: http
          resources:
            {}
          env:
            - name: ASPNETCORE_ENVIRONMENT
              value: Development
            - name: ASPNETCORE_URLS
              value: http://0.0.0.0:80
            - name: AZUREBLOBSTORAGE__CONNECTIONSTRING
              value: "AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;DefaultEndpointsProtocol=http;BlobEndpoint=http://gpitfutures-bc-azurite.buyingcatalogue:10000/devstoreaccount1;QueueEndpoint=http://gpitfutures-bc-azurite.buyingcatalogue:10001/devstoreaccount1;TableEndpoint=http://gpitfutures-bc-azurite.buyingcatalogue:10002/devstoreaccount1;"
            - name: AZUREBLOBSTORAGE__CONTAINERNAME
              value:  "container-1"
---
# Source: local-env/charts/mp/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gpitfutures-bc-mp
  labels:
    helm.sh/chart: mp-0.1.0
    app.kubernetes.io/name: marketing-pages
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy: 
    null  
  selector:
    matchLabels:
      app.kubernetes.io/name: marketing-pages
      app.kubernetes.io/instance: bc
  template:
    metadata:
      labels:
        app.kubernetes.io/name: marketing-pages
        app.kubernetes.io/instance: bc
    spec:
      imagePullSecrets:
        - name: regcredlocal
      serviceAccountName: gpitfutures-bc-mp
      securityContext:
        {}
      containers:
        - name: mp
          securityContext:
            {}
          image: "gpitfuturesdevacr.azurecr.io/nhsd/buying-catalogue/marketingpage:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3002
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /health/live
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /health/ready
          #     port: http
          resources:
            limits:
              cpu: 1000m
              memory: 300Mi
            requests:
              cpu: 250m
              memory: 100Mi
          env:
            - name: API_HOST
              value: "http://gpitfutures-bc-bapi.buyingcatalogue:5100"
            - name: DOCUMENT_HOST
              value: "http://gpitfutures-bc-dapi.buyingcatalogue:5101"
---
# Source: local-env/charts/pb/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gpitfutures-bc-pb
  labels:
    helm.sh/chart: pb-0.1.0
    app.kubernetes.io/name: public-browse
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  strategy: 
    null  
  selector:
    matchLabels:
      app.kubernetes.io/name: public-browse
      app.kubernetes.io/instance: bc
  template:
    metadata:
      labels:
        app.kubernetes.io/name: public-browse
        app.kubernetes.io/instance: bc
    spec:
      imagePullSecrets:
        - name: regcredlocal
      serviceAccountName: gpitfutures-bc-pb
      securityContext:
        {}
      containers:
        - name: pb
          securityContext:
            {}
          image: "gpitfuturesdevacr.azurecr.io/nhsd/buying-catalogue/publicbrowse:latest"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /health/live
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /health/ready
          #     port: http
          resources:
            limits:
              cpu: 1000m
              memory: 300Mi
            requests:
              cpu: 250m
              memory: 100Mi
          env:
            - name: NODE_ENV
              value: production
            - name: API_HOST
              value: "http://gpitfutures-bc-bapi.buyingcatalogue:5100"
            - name: DOCUMENT_HOST
              value: "http://gpitfutures-bc-dapi.buyingcatalogue:5101"
---
# Source: local-env/charts/file-loader/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gpitfutures-bc-file-loader
  labels:
    helm.sh/chart: file-loader-0.1.0
    app.kubernetes.io/name: file-loader
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
spec:
  template:
    spec:
      imagePullSecrets:
        - name: regcredlocal
      serviceAccountName: gpitfutures-bc-file-loader
      securityContext:
        {}
      containers:
      - name: file-loader
        securityContext:
            {}
        image: "gpitfuturesdevacr.azurecr.io/nhsd/buying-catalogue/file-uploader:latest"
        imagePullPolicy: IfNotPresent
        resources:
            limits:
              cpu: 1000m
              memory: 500Mi
            requests:
              cpu: 250m
              memory: 50Mi
        env:
          - name: AZURE_STORAGE_CONNECTION_STRING
            value: AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;DefaultEndpointsProtocol=http;BlobEndpoint=http://gpitfutures-bc-azurite.buyingcatalogue:10000/devstoreaccount1;QueueEndpoint=http://gpitfutures-bc-azurite.buyingcatalogue:10001/devstoreaccount1;TableEndpoint=http://gpitfutures-bc-azurite.buyingcatalogue:10002/devstoreaccount1;
      restartPolicy: OnFailure
---
# Source: local-env/charts/mp/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: gpitfutures-bc-mp
  labels:
    helm.sh/chart: mp-0.1.0
    app.kubernetes.io/name: marketing-pages
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
    - host: "localhost"
      http:
        paths:
          - path: /supplier
            backend:
              serviceName: gpitfutures-bc-mp
              servicePort: 3002
---
# Source: local-env/charts/pb/templates/ingress.yaml
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: gpitfutures-bc-pb
  labels:
    helm.sh/chart: pb-0.1.0
    app.kubernetes.io/name: public-browse
    app.kubernetes.io/instance: bc
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/managed-by: Helm
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  rules:
    - host: "localhost"
      http:
        paths:
          - path: /
            backend:
              serviceName: gpitfutures-bc-pb
              servicePort: 3000

